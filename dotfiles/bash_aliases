# shellcheck shell=bash disable=SC2164

# for sanity
alias ls='ls --color=auto'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Bazel should always secretly be Bazelisk if possible.
alias bazel=bazelisk

# for a beep
alias beep='play -qn synth 1 sine 800 vol 1 '

# Use the mac names for our copy buffer commands. wl-copy is a Wayland
# replacement for xclip (requires the wl-clipboard package).
if [[ -z "$(which pbcopy)" ]]; then
    alias pbcopy='wl-copy'
    alias pbpaste='wl-paste'
fi

# makes all aliases accessible via sudo
alias sudo='sudo '

# Always give me a python that makes sense.
_should_alias_python_to_python3=false
if [[ -z "$(which python)" && -n "$(which python3)" ]]; then
    _should_alias_python_to_python3=true
fi
if [[ -x "$(command -v lsb_release)" ]] && ! lsb_release -a | grep -q Debian; then
    _should_alias_python_to_python3=true
fi
if [[ "$_should_alias_python_to_python3" = true ]]; then
    if [[ -z "$(ls ~/.miniconda*)" ]]; then
        alias python='python3'
        if [[ -n "$(which pip3)" ]]; then
            alias pip='pip3'
        fi
    fi
fi
unset _should_alias_python_to_python3

WORKTREE_ROOT="${HOME}/developer/dbSDK"
if [[ ! -d "${WORKTREE_ROOT}" ]]; then
    # Try one alternative directory just in case.
    WORKTREE_ROOT="${HOME}/dbSDK"
fi

# Instantiate Git worktree aliases for Digital Biology only if the WORKTREE_ROOT
# exists.
if [[ -d "${WORKTREE_ROOT}" ]]; then
    gtw() {
        cd "${WORKTREE_ROOT}"
        ls
    }
    hgd() {
        local worktree_path
        worktree_path="${WORKTREE_ROOT}/$1"
        if [[ -d "${worktree_path}" ]]; then
            echo "Worktree exists, taking you there!"
            cd "${worktree_path}"
            pwd
        else
            if git show-ref --verify --quiet "refs/heads/$1"; then
                echo "Checking out existing branch...$1"
                git worktree add "${worktree_path}" "$1" && cd "${worktree_path}"
            else
                git worktree add "${WORKTREE_ROOT}/$1" main -b "$1" && cd "${worktree_path}"
            fi
        fi
    }
    hgdelete () {
        local worktree_path;
        worktree_path="${WORKTREE_ROOT}/$1"
        if [[ -d "${worktree_path}" ]]; then
            echo -n "Attempting to remove git worktree at ${worktree_path}..."
            git worktree remove "${worktree_path}" && echo "Success!"
        else
            echo "Worktree path ${worktree_path} does not exist!" 1>&2
        fi
    }
fi
