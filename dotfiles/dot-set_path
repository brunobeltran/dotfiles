# shellcheck shell=bash

# Load in the install path of our dotfiles. Anything we build from source
# ourselves will be relative to this path.
DOTFILES_BUILD_PATH=
if [[ -f "${HOME}/.dotfiles-build-path" ]]; then
    DOTFILES_BUILD_PATH=$(cat "${HOME}/.dotfiles-build-path")
fi

##
# The following are appended to the path in the order they are found in the
# `paths_to_append` array.

# Fix weird systems that don't set the usual PATH locations at all.
paths_to_append=(/bin /usr/bin /usr/local/bin /sbin /usr/sbin)

# airwave connects windows VSTs to my pure-linux Bitwig Studio install
paths_to_append+=(/opt/airwave/bin /Applications/Inkscape.app/Contents/MacOS)

##
# The following are prepended in reverse order, so they appear in the path in
# the order they are found in the `paths_to_prepend` array.

# I like begin able to execute things in the working directory with highest
# priority
paths_to_prepend=("." "${HOME}/bin")

# Highest non-local priority goes to our from-source builds.
paths_to_prepend+=("${DOTFILES_BUILD_PATH}/neovim-build/bin" "${DOTFILES_BUILD_PATH}/fzf/bin")

# For rust developement.
paths_to_prepend+=("${HOME}/.cargo/bin")

# Homebrew on Macs (and sometimes on Linux as well)!
paths_to_prepend+=(/opt/homebrew/bin)

# Neovim on servers following
# https://github.com/neovim/neovim/blob/master/INSTALL.md
paths_to_prepend+=(/opt/nvim-linux64/bin)

# Local install of fzf created by Bruno's dotfiles
paths_to_prepend+=("${HOME}/.fzf/bin")

# Mac-specific Kitty installation, for both `kitty` and `kitten`
paths_to_prepend+=("/Applications/kitty.app/Contents/MacOS")

##
# This logic actually performs the operations. To prevent an existing PATH
# from mangling this order, we first **remove** all the paths we are going to
# manually add.

NEW_PATH=:"${PATH}":
for p in "${paths_to_append[@]}"; do
    if [[ "${NEW_PATH}" == *":${p}:"* ]]; then
        # Double-slash removes _all_ occurences.
        NEW_PATH="${NEW_PATH//:${p}:/:}"
    fi
done
for p in "${paths_to_prepend[@]}"; do
    if [[ "${NEW_PATH}" == *":${p}:"* ]]; then
        NEW_PATH="${NEW_PATH//:${p}:/:}"
    fi
done
# The above will not create any empty path entries, but just in case some
# predate this script running, we remove them anyway for cleanliness.
NEW_PATH="${NEW_PATH//::/}"

##
# Now append.

for p in "${paths_to_append[@]}"; do
    if [[ -d "${p}" && ! "${NEW_PATH}" == *":${p}:"* ]]; then
        NEW_PATH="${NEW_PATH}${p}:"
    fi
done

##
# Now prepend.

for ((idx = ${#paths_to_prepend[@]} - 1; idx >= 0; idx--)); do
    p="${paths_to_prepend[idx]}"
    if [[ -d "${p}" && (! "${NEW_PATH}" == *":${p}:"*) ]]; then
        NEW_PATH=":${p}${NEW_PATH}"
    fi
done

##
# Finally, set the "official" PATH all at once.

export PATH="${NEW_PATH:1:-1}"
