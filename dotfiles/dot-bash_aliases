# shellcheck shell=bash disable=SC2164

# for sanity
alias ls='ls --color=auto'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Bazel should always secretly be Bazelisk if possible.
alias bazel=bazelisk

# for a beep
alias beep='play -qn synth 1 sine 800 vol 1 '

if [[ -f "${HOME}/.secrets/forest-gemfury-deploy-brunobeltran-kOVSV" ]]; then
    alias fury_init='export UV_INDEX_FOREST_USERNAME=$(cat "${HOME}/.secrets/forest-gemfury-deploy-brunobeltran-kOVSV")'
fi

# Use the mac names for our copy buffer commands. wl-copy is a Wayland
# replacement for xclip (requires the wl-clipboard package).
if [[ -z "$(which pbcopy)" ]]; then
    alias pbcopy='wl-copy'
    alias pbpaste='wl-paste'
fi

# nvim does not provide a dedicated executable for diff'ing
if [[ -x "$(command -v nvim)" ]]; then
    alias vimdiff='nvim -d'
fi

# makes all aliases accessible via sudo
alias sudo='sudo '

# Always give me a python that makes sense.
_should_alias_python_to_python3=false
if [[ -z "$(which python)" && -n "$(which python3)" ]]; then
    _should_alias_python_to_python3=true
fi
if [[ -x "$(command -v lsb_release)" ]] && ! lsb_release -a | grep -q Debian; then
    _should_alias_python_to_python3=true
fi
if [[ "$_should_alias_python_to_python3" = true ]]; then
    if [[ -z "$(ls ~/.miniconda*)" ]]; then
        alias python='python3'
        if [[ -n "$(which pip3)" ]]; then
            alias pip='pip3'
        fi
    fi
fi
unset _should_alias_python_to_python3

WORKTREE_ROOT="${HOME}/forest"
ORIGIN_REMOTE_NAME="origin"   # Where you create branches.
UPSTREAM_REMOTE_NAME="origin" # Where 'main' lives.
MAIN_BRANCH_NAME="main"
# When we create a new worktree, we immediately kick off a minimal target that
# triggers the most expensive repository rules.
INITIAL_TARGET="//tools:workspace_test"

# Convenience no-op function for when we want to print a message only in bash
# debug---i.e., `set -x`--- mode. Basically a more semantically-reasonable way
# to do something like `echo "Debug message" >/dev/null`.
_INFO() {
    # shellcheck disable=SC2317
    unused() {
        :
    }
}

# Convenience function to check if a branch has an already-merged PR.
branch_merged_upstream_time() {
    local upstream_base="$1" # usually `main` or `master`.
    local branch_name="$2"
    local pr_info=$(gh pr list \
        --state all \
        --head "${branch_name}" \
        --base "${upstream_base}" \
        --json number,state,title,mergedAt \
        --limit 1)
    if [[ $(echo "$pr_info" | jq 'length') -eq 0 ]]; then
        echo "❌ No PR found from branch '${branch_name}' into branch '${upstream_base}'." >&2
        return 1
    fi
    if [[ $(echo "$pr_info" | jq -r '.[0].state') != MERGED ]]; then
        local pr_number=$(echo "$pr_info" | jq -r '.[0].number')
        local pr_title=$(echo "$pr_info" | jq -r '.[0].title')
        echo "🟡 Found un-merged PR #${pr_number} ('${pr_title}')." >&2
        return 2
    fi
    # Switch to just `-d` if using coreutils.
    local github_date_string="$(echo "$pr_info" | jq -r '.[0].mergedAt')"
    date -j -f "%Y-%m-%dT%H:%M:%S%z" "${github_date_string/Z/+0000}" +%s
    return 0
}

# Convenience function to print a branch's most recent commit in seconds since
# epoch.
most_recent_commit_time() {
    local latest_commit_time_string="$(git log -1 --format=%cI "$1")"
    local bsd_friendly_time="${latest_commit_time_string:0:22}${latest_commit_time_string:23:2}"
    date -j -f "%Y-%m-%dT%H:%M:%S%z" "${bsd_friendly_time}" +%s
}

# Instantiate Git worktree aliases for Forest only if the WORKTREE_ROOT
# exists.
if [[ -d "${WORKTREE_ROOT}" ]]; then
    gtw() {
        cd "${WORKTREE_ROOT}"
        ls
    }
    # Implementation of `hgd`. Executes in a subshell in order to use `set`, and
    # prints *only* the final directory that should be `cd`'d to to stdout on
    # success---which means we must be careful to redirect the output of all
    # commands when updating this function!
    _hgd() { echo "$(
        worktree_path="${WORKTREE_ROOT}/$1"
        main_path="${WORKTREE_ROOT}/${MAIN_BRANCH_NAME}"
        requested_ref="refs/heads/$1"
        main_ref="refs/heads/${MAIN_BRANCH_NAME}"
        set -euox pipefail
        if [[ -d "${worktree_path}" ]]; then
            _INFO "Worktree exists, taking you there!" &&
                cd "${worktree_path}" &&
                pwd
            exit $?
        fi
        _INFO "Fetching '${ORIGIN_REMOTE_NAME}' to ensure we know if the branch exists!"
        git fetch ${ORIGIN_REMOTE_NAME} >/dev/null
        if git show-ref --verify --quiet "${requested_ref}"; then
            _INFO "Checking out existing branch...$1" &&
                git worktree add "${worktree_path}" "$1" >/dev/null
        else
            if ! git show-ref --verify --quiet "${main_ref}"; then
                _INFO "There does not seem to be a '${MAIN_BRANCH_NAME}' branch...please make one!"
                exit 1
            fi
            if [[ ! -d "${main_path}" ]]; then
                _INFO "There does not appear to be a worktree for the ${MAIN_BRANCH_NAME} branch...please make one!"
                exit 2
            fi
            _INFO "Pulling upstream changes to main before creating new branch!"
            if ! { cd "${main_path}" && git pull ${UPSTREAM_REMOTE_NAME} ${MAIN_BRANCH_NAME} >/dev/null; }; then
                _INFO "Failed to pull upstream changes to ${MAIN_BRANCH_NAME}, please update '${MAIN_BRANCH_NAME}' then re-run 'hgd'!"
                exit 3
            fi
            _INFO "Creating new worktree on fresh branch based on '${MAIN_BRANCH_NAME}'!"
            if ! git worktree add "${worktree_path}" ${MAIN_BRANCH_NAME} -b "$1" >/dev/null; then
                _INFO "Failed to create worktree!"
                exit 4
            fi
        fi
        cd "${worktree_path}"

        _INFO "Pulling/updating all submodules..."
        git submodule update --init --recursive >/dev/null 2>&1

        _INFO "Kicking off some slow repository rules in the background..."
        _INFO "...it may take up to 5min for these to finish!"
        bazel build $INITIAL_TARGET >/dev/null 2>&1 &
        pwd
    )"; }
    hgd() {
        local worktree_path
        local subshell_exit_code
        worktree_path="$(_hgd "$1")"
        subshell_exit_code="$?"
        [[ -d "${worktree_path}" ]] &&
            echo "Taking you to ${worktree_path} in this shell..." &&
            cd "${worktree_path}"
        return "${subshell_exit_code}"
    }

    _hgdelete() {
        local branch_name="$1"
        local worktree_path="${WORKTREE_ROOT}/${branch_name}"
        set -euxo pipefail
        local merge_time="$(branch_merged_upstream_time "${MAIN_BRANCH_NAME}" "${branch_name}")"
        if [[ -z "${merge_time}" && "$2" != "-f" ]]; then
            echo "Pass \"-f\" flag to ignore this and still attempt removal." >&2
            echo "WARNING: \"-f\" flag FORCES worktree and local branch+remote deletion!" >&2
            return 1
        fi
        if [[ -d "${worktree_path}" ]]; then
            echo -n "Attempting to remove git worktree at ${worktree_path}..."
            if ! git worktree remove "${worktree_path}"; then
                echo "FAILED. Pass '-f' to force." >&2
                return 2
            else
                echo "Success!"
            fi
        fi
        local local_commit_time="$(most_recent_commit_time "${branch_name}")"
        if (($merge_time < $local_commit_time)); then
            echo "FAILED. Local commits after merge. Leaving ${branch_name} intact." >&2
            return 3
        fi
        echo -n "Attempting to remove branch '${branch_name}'..."
        if ! git branch -D "$1"; then
            echo "FAILED."
            return 3
        else
            echo "Success!"
        fi
        echo "Successfully scrubbed all references to $1"
    }
    hgdelete() {
        # Subshell to allow us to `set -euxo`...etc locally.
        (
            _hgdelete "$@"
        )
        return $?
    }
fi
